import { Telegraf, Markup } from 'telegraf';
import dotenv from 'dotenv';
import { saveRegistration, getRegistrations } from './db.js';
import cron from 'node-cron';

dotenv.config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è BOT_TOKEN
if (!process.env.BOT_TOKEN) {
  console.error('‚ùå –û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
  console.error('–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ: BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω');
  process.exit(1);
}

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
const STATES = {
  IDLE: 'idle',
  WAITING_FIRSTNAME: 'waiting_firstname',
  WAITING_LASTNAME: 'waiting_lastname',
  WAITING_PHONE: 'waiting_phone',
  WAITING_COMPANY: 'waiting_company',
  WAITING_ACTIVITY_TYPE: 'waiting_activity_type',
  COMPLETED: 'completed'
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userStates = new Map();
const userData = new Map();

// –§—É–Ω–∫—Ü–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
const validators = {
  firstname: (text) => {
    if (!text || text.trim().length < 2) {
      return { valid: false, error: '‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>' };
    }
    if (!/^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s-]+$/.test(text.trim())) {
      return { valid: false, error: '‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:' };
    }
    return { valid: true };
  },

  lastname: (text) => {
    if (!text || text.trim().length < 2) {
      return { valid: false, error: '‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>' };
    }
    if (!/^[–∞-—è—ë–ê-–Ø–Åa-zA-Z\s-]+$/.test(text.trim())) {
      return { valid: false, error: '‚ùå –§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:' };
    }
    return { valid: true };
  },

  phone: (text) => {
    const phoneRegex = /^(?:\+7|7|8)\s*\(?\d{3}\)?[\s.-]*\d{3}[\s.-]*\d{2}[\s.-]*\d{2}$/;

    const trimmed = text.trim();
    if (!phoneRegex.test(trimmed)) {
      return { valid: false, error: '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>' };
    }
    
    return { valid: true };
  },
  
  company: (text) => {
    if (!text || text.trim().length < 2) {
      return { valid: false, error: '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>' };
    }
    return { valid: true };
  },
  
  activity_type: (text) => {
    if (!text || text.trim().length < 2) {
      return { valid: false, error: '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n\n <b>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:</b>' };
    }
    return { valid: true };
  }
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const initUser = (userId) => {
  userStates.set(userId, STATES.IDLE);
  userData.set(userId, {});
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserData = (userId) => {
  if (!userData.has(userId)) {
    initUser(userId);
  }
  return userData.get(userId);
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserState = (userId) => {
  if (!userStates.has(userId)) {
    initUser(userId);
  }
  return userStates.get(userId);
};

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const setUserState = (userId, state) => {
  userStates.set(userId, state);
};

// –§—É–Ω–∫—Ü–∏—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
async function sendBroadcast(message) {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∞—Å—Å–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ Supabase
    const users = await getRegistrations();

    let successCount = 0;
    let errorCount = 0;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π (–¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ Telegram API)
    for (const user of users) {
      try {
        await bot.telegram.sendMessage(user.telegram_id, message, { parse_mode: 'HTML' });
        successCount++;
        console.log(`‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${user.name} (${user.telegram_id})`);
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ 50ms –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É, –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –ª–∏–º–∏—Ç)
        await new Promise(resolve => setTimeout(resolve, 50));
      } catch (err) {
        errorCount++;
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${user.name} (${user.telegram_id}):`, err.message);
      }
    }

    console.log(`\nüìà –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
    console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}`);
    console.log(`   ‚ùå –û—à–∏–±–æ–∫: ${errorCount}`);
  } catch (err) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏:', err);
  }
}

// –ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏ –±–æ—Ç–∞
bot.start((ctx) => {
  const userId = ctx.from.id;
  initUser(userId);

  ctx.reply(
    '<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:</b>', 
    { parse_mode: 'HTML' }
  );
  
  setUserState(userId, STATES.WAITING_FIRSTNAME);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', (ctx) => {
  const userId = ctx.from.id;
  const state = getUserState(userId);
  const data = getUserData(userId);
  const text = ctx.message.text;
  
  switch (state) {
    case STATES.WAITING_FIRSTNAME:
      const nameValidation = validators.firstname(text);
      if (!nameValidation.valid) {
        return ctx.reply(nameValidation.error, { parse_mode: 'HTML' });
      }
      
      data.firstname = text.trim();
      setUserState(userId, STATES.WAITING_LASTNAME);
      ctx.reply('<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:</b>', { parse_mode: 'HTML' });
      break;
      
    case STATES.WAITING_LASTNAME:
      const lastnameValidation = validators.lastname(text);
      if (!lastnameValidation.valid) {
        return ctx.reply(lastnameValidation.error, { parse_mode: 'HTML' });
      }
      
      data.lastname = text.trim();
      setUserState(userId, STATES.WAITING_PHONE);
      ctx.reply('<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>', { parse_mode: 'HTML' });
      break;
      
    case STATES.WAITING_PHONE:
      const phoneValidation = validators.phone(text);
      if (!phoneValidation.valid) {
        return ctx.reply(phoneValidation.error, { parse_mode: 'HTML' });
      }
      
      data.phone = text.trim();
      setUserState(userId, STATES.WAITING_COMPANY);
      ctx.reply('<b>–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:</b>', { parse_mode: 'HTML' });
      break;
      
    case STATES.WAITING_COMPANY:
      const companyValidation = validators.company(text);
      if (!companyValidation.valid) {
        return ctx.reply(companyValidation.error, { parse_mode: 'HTML' });
      }
      
      data.company = text.trim();
      setUserState(userId, STATES.WAITING_ACTIVITY_TYPE);
      ctx.reply('<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à—É —Å—Ñ–µ—Ä—É –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:</b>', { parse_mode: 'HTML' });
      break;
      
    case STATES.WAITING_ACTIVITY_TYPE:
      const activityTypeValidation = validators.activity_type(text);
      if (!activityTypeValidation.valid) {
        return ctx.reply(activityTypeValidation.error, { parse_mode: 'HTML' });
      }
      
      data.activity_type = text.trim();
      setUserState(userId, STATES.COMPLETED);

      // –°–û–•–†–ê–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –í –ë–î
      try {
        saveRegistration({
          telegram_id: userId,
          firstname: data.firstname,
          lastname: data.lastname,
          phone: data.phone,
          company: data.company,
          activity_type: data.activity_type,
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const summary = 
          `‚úÖ <b>${data.firstname}, –∑–∞–ø–∏—Å–∞–ª–∏ –≤–∞—Å –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä.</b>\n\n` +
          '–û–Ω —Å—Ç–∞—Ä—Ç—É–µ—Ç 30 –æ–∫—Ç—è–±—Ä—è –≤ 10:00 –ø–æ –ú–°–ö. –ú—ã –ø—Ä–∏—à–ª–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∏ —Å—Å—ã–ª–∫–æ–π –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –∑–∞—Ä–∞–Ω–µ–µ, –ø–æ—ç—Ç–æ–º—É –Ω–µ –æ—Ç–∫–ª—é—á–∞–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.\n\n' +
          '–î–æ –≤—Å—Ç—Ä–µ—á–∏!\n\n'
        
        ctx.reply(summary, { parse_mode: 'HTML' });
      } catch (e) {
        console.error('DB error:', e);
        return ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
      }
      
      break;
      
    case STATES.IDLE:
      ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      break;
      
    case STATES.COMPLETED:
      ctx.reply('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
      break;
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
bot.help((ctx) => {
  ctx.reply(
    'üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n' +
    '/start - –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä\n' +
    '/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`–û—à–∏–±–∫–∞ –¥–ª—è ${ctx.updateType}:`, err);
  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

// –ó–∞–ø—É—Å–∫ cron –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–µ–±–∏–Ω–∞—Ä–µ
cron.schedule('10 18 * * *', () => {
  const message = 
    'üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–µ–±–∏–Ω–∞—Ä–µ!</b>\n\n' +
    '–í–µ–±–∏–Ω–∞—Ä –Ω–∞—á–Ω–µ—Ç—Å—è —Å–µ–≥–æ–¥–Ω—è –≤ 15:00 –ø–æ –ú–°–ö.\n\n' +
    'üìå –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞—Ä–∞–Ω–µ–µ:\n' +
    '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n' +
    '‚Ä¢ –ü—Ä–∏–≥–æ—Ç–æ–≤—å—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å–ø–∏–∫–µ—Ä—É\n\n' +
    '–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±–∏–Ω–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.\n\n' +
    '–î–æ –≤—Å—Ç—Ä–µ—á–∏! üëã';
  
  sendBroadcast(message);
}, {
  timezone: 'Europe/Moscow'
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => {
    console.log('‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
  })
  .catch((err) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', err);
  });

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

